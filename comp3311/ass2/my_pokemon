#! /usr/bin/env python3


"""
COMP3311
23T1
Assignment 2
Pokemon Database

Written by: Aidan Tan (z5360925)
Written on: 
	Start: 5/4/23
	End: 7/4/23

My Pokemon

Create your very own Pokemon
"""


import sys
import psycopg2
import helpers
from random import Random


### Constants
USAGE = f"Usage: {sys.argv[0]} <Seed>"


### Globals
db = None
Seed = None
rng = None


### Command-line args
if len(sys.argv) != 2:
	print(USAGE, file=sys.stderr)
Seed = int(sys.argv[1]) # read the seed from the command line
rng  = Random(Seed)     # set the seed for the python random number generator

# `rng` is a python Random number generator
# `rng.random()` returns a random float between 0 and 1
# `rng.randint(a, b)` returns a random integer between a and b (inclusive)

# `SELECT setseed(seed);` sets the postgres random seed to `seed`
# `SELECT * FROM Table ORDER BY random() LIMIT 5;` gives 5 random rows from the table `Table`
# `SELECT setseed(seed);` should be used once, before any calls to random(), with the a random number generated by `rng.random()`

def menu(items: list[str]) -> int:
	"""
	Given a list of strings,
	print a numbered menu
	and return the user's selection.
	"""
	padding = len(str(len(items)))
	print(f"Select an option from the menu below by entering its number:")
	for i, item in enumerate(items):
		print(f"{i+1:{padding}}) {item}")
	ret = int(input("> Selection: ")) - 1
	if not sys.stdin.isatty():
		print(f"{ret+1}")
	print()
	return ret


def main():
	"""
	Given a random number generated seed value
	Allow the user to select the following information:
	- Pokémon's Name
	- Pokémon's Species
	- Pokémon's Type(s)
	- Pokémon's ID (Regional_ID and National_ID)
	- Pokémon's Ability
	- Pokémon's Moves (including the move name, move type, move category, move power, and move accuracy)
	And return the user's selections
	"""
	cur = db.cursor()
	cur.execute(f"select setseed({rng.random()});")

	# Select 10 games Pokemon should come from
	gamesQuery = """select name, id
	from games
	order by random()
	limit 10
	;
	"""
	cur.execute(gamesQuery)

	gameList = cur.fetchall()
	gameStrList = helpers.myPokemonTupleToStr(gameList)
	gameOutput = menu(gameStrList)
	gameName, gameId = gameList[gameOutput]

	# Select 10 Pokemon in selected game
	pokemonQuery = f"""
	select p.name, p.id, p.species, x.regional_id, x.national_id
	from pokemon p
	join pokedex x on p.id = x.national_id
	join games g on x.game = g.id
	where g.id = {gameId}
	order by random()
	limit 10
	;
	"""
	cur.execute(pokemonQuery)

	pokemonList = cur.fetchall()
	pokemonStrList = helpers.myPokemonTupleToStr(pokemonList)
	pokemonOutput = menu(pokemonStrList)
	pokemonName, pokemonId, species, regionalId, nationalId = pokemonList[pokemonOutput]
	nationalId = nationalId[1:-3]

	# Select all abilities associated with selected pokemon
	abilitiesQuery = f"""
	select a.name, a.id
	from abilities a
	join knowable_abilities k on a.id = k.knows
	join pokemon p on k.known_by = p.id
	where p.id = {pokemonId}
	order by 2
	;
	"""

	cur.execute(abilitiesQuery)

	abilityList = cur.fetchall()
	if len(abilityList) == 0:
		abilityName = "None"
	else:
		abilityStrList = helpers.myPokemonTupleToStr(abilityList)
		abilityOutput = menu(abilityStrList)
		abilityName, abilityId = abilityList[abilityOutput]
	
	# Select up to four moves for selected pokemon
	movesQueryStart = f"""
	select distinct m.name, m.id, t.name, m.category, m.power, m.accuracy
	from moves m
	join learnable_moves l on m.id = l.learns
	join games g on l.learnt_in = g.id
	join requirements r on l.learnt_when = r.id
	join pokemon p on l.learnt_by = p.id
	join types t on m.of_type = t.id
	where g.id = {gameId}
	and p.id = {pokemonId}
	and r.assertion like 'Level:%'
	"""
	movesQueryMiddle = []
	movesQueryEnd = """
	order by 2
	;
	"""
	learnableMovesList = []

	for i in range(0, 4):
		movesQuery = movesQueryStart
		for j in movesQueryMiddle:
			movesQuery = movesQuery + j
		movesQuery = movesQuery + movesQueryEnd

		cur.execute(movesQuery)
		movesList = cur.fetchall()
		if movesList == []:
			break

		movesStrList = helpers.myPokemonTupleToStr(movesList)
		movesOutput = menu(movesStrList)
		movesName, movesId, movesType, movesCategory, movesPower, movesAccuracy = movesList[movesOutput]

		movesQueryMiddle.append(f"and not m.id = {movesId}")
		learnableMovesList.append(f"\t{movesName}\t[{movesType}]\t(Category: {movesCategory}, Power: {movesPower}, Accuracy: {movesAccuracy})")


	# Print all Pokemon information
	print(f"Here is your new Pokemon (from Pokemon {gameName}):\n")
	print(f"Name: {pokemonName}")
	print(f"Species: {species}")

	# Get pokemon types
	typesQuery1 = f"""select t.name 
	from pokemon p 
	join types t on p.first_type = t.id 
	where p.id = {pokemonId}
	;
	"""
	cur.execute(typesQuery1)
	typesTuple1 = cur.fetchone()
	firstType = typesTuple1[0]

	typesQuery2 = f"""select t.name 
	from pokemon p 
	join types t on p.second_type = t.id 
	where p.id = {pokemonId}
	;
	"""
	cur.execute(typesQuery2)
	typesTuple2 = cur.fetchone()
	if typesTuple2 is None:
		print(f"Type: {firstType}")
	else:
		secondType = typesTuple2[0]
		print(f"Type: {firstType} + {secondType}")

	print(f"Pokedex Number: {regionalId} ({nationalId})\n")
	print(f"Ability: {abilityName}\n")
	
	# Get pokemon moves information
	print("Moves:")
	for i in learnableMovesList:
		print(i)


if __name__ == '__main__':
	try:
		db = psycopg2.connect(dbname="ass2")
		main()
	except psycopg2.Error as err:
		print("DB error: ", err)
	except Exception as err:
		print("Internal Error: ", err)
		raise err
	finally:
		if db is not None:
			db.close()
	sys.exit(0)
